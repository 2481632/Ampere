{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ampere Contributors Jaspar Neukirch, Design Henry el Bahnasawy, Computer Science Marvin Hagemeister, Computer Science Check out the other projects: https://www.codingixd.org/lets-get-physical/","title":"Home"},{"location":"#ampere","text":"","title":"Ampere"},{"location":"#contributors","text":"Jaspar Neukirch, Design Henry el Bahnasawy, Computer Science Marvin Hagemeister, Computer Science Check out the other projects: https://www.codingixd.org/lets-get-physical/","title":"Contributors"},{"location":"about/","text":"About Ampere helps users keep better track of their own electricity consumption. Paying attention to one\u2019s own electricity consumption is becoming increasingly important. In recent years, the cost of providing electricity to German households has risen noticeably. New, established technologies such as heat pumps and e-mobility have high energy requirements. The structural change towards renewable energies also requires individuals to deal responsibly with electricity as a resource. Electricity meters in households are usually hardly visible and the values they display provide little concrete information about one\u2019s own usage behavior. Ampere gives users a differentiated picture of their consumption. The energy supplier provides the device. Smart home devices and digitally networked electricity meters collect the data. The device displays time periods between the current daily electricity consumption to the consumption of the current year. More detailed data and a consumption history are shown in the Ampere App on a smartphone. Personalized tips and tricks are displayed based on the consumption data as a guide. To set up Ampere, users first enter a target value. The levels continuously show whether the user meets or exceeds this target value in the time period. The display is discreet, always present and can be read quickly. This is how Ampere motivates users to optimize their electricity needs. Projektaufbau","title":"About"},{"location":"about/#about","text":"Ampere helps users keep better track of their own electricity consumption. Paying attention to one\u2019s own electricity consumption is becoming increasingly important. In recent years, the cost of providing electricity to German households has risen noticeably. New, established technologies such as heat pumps and e-mobility have high energy requirements. The structural change towards renewable energies also requires individuals to deal responsibly with electricity as a resource. Electricity meters in households are usually hardly visible and the values they display provide little concrete information about one\u2019s own usage behavior. Ampere gives users a differentiated picture of their consumption. The energy supplier provides the device. Smart home devices and digitally networked electricity meters collect the data. The device displays time periods between the current daily electricity consumption to the consumption of the current year. More detailed data and a consumption history are shown in the Ampere App on a smartphone. Personalized tips and tricks are displayed based on the consumption data as a guide. To set up Ampere, users first enter a target value. The levels continuously show whether the user meets or exceeds this target value in the time period. The display is discreet, always present and can be read quickly. This is how Ampere motivates users to optimize their electricity needs.","title":"About"},{"location":"about/#projektaufbau","text":"","title":"Projektaufbau"},{"location":"api/","text":"API A simple rest-API is used to provide a simple way to save, update and get energy usage data. Make api calls POST data to database GET and POST are allowed. GET will return a list of all entries made by device. http://127.0.0.1:8000/api/device/<device_id>/usage/ Example GET /api/device/52c13cb7-cb25-4818-a9a3-db18e4913ab0/usage/ HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id\": 5, \"device\": { \"id\": \"52c13cb7-cb25-4818-a9a3-db18e4913ab0\", \"created\": \"2023-01-31T13:19:38.003111Z\" }, \"loadDevice\": { \"id\": 1, \"label\": \"Sp\u00fclmaschiene\" }, \"created\": \"2023-01-31T21:54:11.504885Z\", \"usage\": 10 }, { \"id\": 4, \"device\": { \"id\": \"52c13cb7-cb25-4818-a9a3-db18e4913ab0\", \"created\": \"2023-01-31T13:19:38.003111Z\" }, \"loadDevice\": { \"label\": \"\" }, \"created\": \"2023-01-31T14:18:26.159106Z\", \"usage\": 66 } ] Get computed values of device Only GET is allowed. /api/device/<device_id>/computed/ This will return a json object containing the current, avg day, avg month and avg year values. Some values may be null if no coresponding entries are found. Example GET /api/device/52c13cb7-cb25-4818-a9a3-db18e4913ab0/computed/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"now\": null, \"day\": null, \"month\": 70, \"year\": 70 }","title":"API"},{"location":"api/#api","text":"A simple rest-API is used to provide a simple way to save, update and get energy usage data.","title":"API"},{"location":"api/#make-api-calls","text":"","title":"Make api calls"},{"location":"api/#post-data-to-database","text":"GET and POST are allowed. GET will return a list of all entries made by device. http://127.0.0.1:8000/api/device/<device_id>/usage/","title":"POST data to database"},{"location":"api/#example","text":"GET /api/device/52c13cb7-cb25-4818-a9a3-db18e4913ab0/usage/ HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json Vary: Accept [ { \"id\": 5, \"device\": { \"id\": \"52c13cb7-cb25-4818-a9a3-db18e4913ab0\", \"created\": \"2023-01-31T13:19:38.003111Z\" }, \"loadDevice\": { \"id\": 1, \"label\": \"Sp\u00fclmaschiene\" }, \"created\": \"2023-01-31T21:54:11.504885Z\", \"usage\": 10 }, { \"id\": 4, \"device\": { \"id\": \"52c13cb7-cb25-4818-a9a3-db18e4913ab0\", \"created\": \"2023-01-31T13:19:38.003111Z\" }, \"loadDevice\": { \"label\": \"\" }, \"created\": \"2023-01-31T14:18:26.159106Z\", \"usage\": 66 } ]","title":"Example"},{"location":"api/#get-computed-values-of-device","text":"Only GET is allowed. /api/device/<device_id>/computed/ This will return a json object containing the current, avg day, avg month and avg year values. Some values may be null if no coresponding entries are found.","title":"Get computed values of device"},{"location":"api/#example_1","text":"GET /api/device/52c13cb7-cb25-4818-a9a3-db18e4913ab0/computed/ HTTP 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"now\": null, \"day\": null, \"month\": 70, \"year\": 70 }","title":"Example"},{"location":"install/","text":"Install Webservices Install requirements Install all dependencys. pip -r requirements.txt Initialize project python manage.py makemigrations api python manage.py migrate Create superuser If not already done, execute the following command to create a superuser. You will need one to add devices to the device list. python manage.py createsuperuser Run dev server Start a dev server on port 8000. python manage.py runserver Add devices to device list Visit http://127.0.0.1:8000/admin/ and log in with you created user. Navigate to devices to add devices.","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#webservices","text":"","title":"Webservices"},{"location":"install/#install-requirements","text":"Install all dependencys. pip -r requirements.txt","title":"Install requirements"},{"location":"install/#initialize-project","text":"python manage.py makemigrations api python manage.py migrate","title":"Initialize project"},{"location":"install/#create-superuser","text":"If not already done, execute the following command to create a superuser. You will need one to add devices to the device list. python manage.py createsuperuser","title":"Create superuser"},{"location":"install/#run-dev-server","text":"Start a dev server on port 8000. python manage.py runserver","title":"Run dev server"},{"location":"install/#add-devices-to-device-list","text":"Visit http://127.0.0.1:8000/admin/ and log in with you created user. Navigate to devices to add devices.","title":"Add devices to device list"}]}